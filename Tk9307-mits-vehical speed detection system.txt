import smtplib
from datetime import datetime
from email.mime.text import MIMEText#email.mime.text.MIMEText(_text[, _subtype[, _charset]])
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase#email.mime.base.MIMEBase(_maintype(e.g. text or image), _subtype(e.g. plain or gif), **_params(e.g.key/value dictionary))
from email import encoders
from subprocess import Popen, PIPE
import digitalio
import board
import adafruit_character_lcd.character_lcd as characterlcd
import os.path
import pygame
import pygame.camera
import RPi.GPIO as GPIO                    #Import GPIO library
import time                                #Import time library
import os

lcd_columns = 16
lcd_rows = 2

lcd_rs = digitalio.DigitalInOut(board.D21)
lcd_en = digitalio.DigitalInOut(board.D20)
lcd_d4 = digitalio.DigitalInOut(board.D16)
lcd_d5 = digitalio.DigitalInOut(board.D26)
lcd_d6 = digitalio.DigitalInOut(board.D19)
lcd_d7 = digitalio.DigitalInOut(board.D13)

lcd = characterlcd.Character_LCD_Mono(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6,
                                      lcd_d7, lcd_columns, lcd_rows)

width = 320
height = 240
pygame.init()
pygame.camera.init()


# looking for an active Ethernet or WiFi device
def find_interface():
    find_device = "ip addr show"
    interface_parse = run_cmd(find_device)
    for line in interface_parse.splitlines():
        if "state UP" in line:
            dev_name = line.split(':')[1]
    return dev_name
 
# find an active IP on the first LIVE network device
def parse_ip():
    find_ip = "ip addr show %s" % interface
    find_ip = "ip addr show %s" % interface
    ip_parse = run_cmd(find_ip)
    for line in ip_parse.splitlines():
        if "inet " in line:
            ip = line.split(' ')[5]
            ip = ip.split('/')[0]
    return ip
 
# run unix shell command, return as ASCII
def run_cmd(cmd):
    p = Popen(cmd, shell=True, stdout=PIPE)
    output = p.communicate()[0]
    return output.decode('ascii')
 
# wipe LCD screen before we start

lcd.clear()
 
# before we start the main loop - detect active network device and ip address
time.sleep(2)
interface = find_interface()
#print(interface)
ip_address = parse_ip()
#print(ip_address)
lcd_line_1 ='wlan conneted: \n'
# current ip address
lcd_line_2 = ip_address
 
# combine both lines into one update to the display
lcd.message = lcd_line_1 + lcd_line_2
time.sleep(2)                        

TRIG1= 3                               #Associate pin 23 to TRIG
ECHO1= 4                                  #Associate pin 24 to ECHO

TRIG2= 17
ECHO2= 27

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG1,GPIO.OUT)               
GPIO.setup(ECHO1,GPIO.IN)                
GPIO.setup(TRIG2,GPIO.OUT)                  
GPIO.setup(ECHO2,GPIO.IN)
time_count=0
count=0




email = 'project.ece222@gmail.com'
password = 'eceece143@'
send_to_email = 'project.ece222@gmail.com'
subject = 'Alert From Vehical Speed Detection System!'
lcd.clear()
lcd_line_1 = 'Vehical Speed\n'
lcd_line_2 = 'Detection SYS'
lcd.message = lcd_line_1 + lcd_line_2
time.sleep(2)

while True:
  lcd.clear()
  lcd_line_1 ='****Welcome*****\n'
  lcd_line_2 = datetime.now().strftime('%b %d  %H:%M:%S')
  # combine both lines into one update to the display
  lcd.message = lcd_line_1 + lcd_line_2
  time.sleep(1)
  GPIO.output(TRIG1, False)                 #Set TRIG as LOW
  print ("Reading sensor data....")
  time.sleep(0.5)                            #Delay of 2 seconds

  GPIO.output(TRIG1, True)                  #Set TRIG as HIGH
  time.sleep(0.00001)                      #Delay of 0.00001 seconds
  GPIO.output(TRIG1, False)                 #Set TRIG as LOW

  while GPIO.input(ECHO1)==0:               #Check whether the ECHO is LOW
    pulse_start = time.time()              #Saves the last known time of LOW pulse

  while GPIO.input(ECHO1)==1:               #Check whether the ECHO is HIGH
    pulse_end = time.time()                #Saves the last known time of HIGH pulse 

  pulse_duration = pulse_end - pulse_start #Get pulse duration to a variable

  distance = pulse_duration * 17150        #Multiply pulse duration by 17150 to get distance
  distance = round(distance, 2)            #Round to two decimal points



  GPIO.output(TRIG2, False)                 #Set TRIG as LOW
  
  time.sleep(0.5)                            #Delay of 2 seconds

  GPIO.output(TRIG2, True)                  #Set TRIG as HIGH
  time.sleep(0.00001)                      #Delay of 0.00001 seconds
  GPIO.output(TRIG2, False)                 #Set TRIG as LOW

  while GPIO.input(ECHO2)==0:               #Check whether the ECHO is LOW
    pulse_start = time.time()              #Saves the last known time of LOW pulse

  while GPIO.input(ECHO2)==1:               #Check whether the ECHO is HIGH
    pulse_end = time.time()                #Saves the last known time of HIGH pulse 

  pulse_duration_R = pulse_end - pulse_start #Get pulse duration to a variable

  distance_R = pulse_duration_R * 17150        #Multiply pulse duration by 17150 to get distance
  distance_R = round(distance_R, 2)            #Round to two decimal points
  print ("1st sensor:",(distance),"  2nd sensor front:",(distance_R))
  if distance > 2 and distance < 400:      #Check whether the distance is within range
    #print "bin status:",distance1,"% free"  #Print distance with 0.5 cm calibration
    if distance >=2 and distance <12:
        print ("Departure sensor detected")
        count=1
        time_count=0
        lcd.clear()
        lcd_line_1 = 'Vehical \n'
        lcd_line_2 = '   departure'
        lcd.message = lcd_line_1 + lcd_line_2
        time.sleep(2)
        
  if distance_R > 2 and distance_R < 400:      #Check whether the distance is within range
    #print "bin status:",distance1,"% free"  #Print distance with 0.5 cm calibration
      if distance_R >=2 and distance_R <12:
           
           print ("Arival sensor detected")
           count=0
           print(time_count)
           speed=((20/time_count)*60)
           print('Speed:',int(speed),'Km/h')
           lcd.clear()
           lcd_line_1 = 'Vehical Arival\n'
           lcd_line_2 = 'Speed:'+str(speed)+'Km/h'
           lcd.message = lcd_line_1 + lcd_line_2
           time.sleep(3)
           if(int(speed) > 70):
                        print('vehical travel in High speed')
                        lcd.clear()
                        lcd_line_1 = 'Vehical travel \n'
                        lcd_line_2 = 'High Speed'
                        lcd.message = lcd_line_1 + lcd_line_2
                        time.sleep(2)
                        cam = pygame.camera.Camera("/dev/video0",(width,height))
                        window = pygame.display.set_mode((width,height),pygame.RESIZABLE)
                        cam.start()
                        image = cam.get_image()
                        cam.stop()
                        window.blit(image,(0,0))
                        pygame.display.update()
                        pygame.image.save(window,'user.jpg')
                        file_location = '//home//pi//user.jpg'
                        message = 'Hi there, vehical travel in High speed at '+str(speed)+'Km/h. Here am attatching the image of that Vehical. Take action soon'
                        msg = MIMEMultipart()#Create the container (outer) email message.
                        msg['From'] = email
                        msg['To'] = send_to_email
                        msg['Subject'] = subject
                        msg.attach(MIMEText(message, 'plain'))#attach new  message by using the Message.attach
                        filename = os.path.basename(file_location)#function returns the tail of the path
                        attachment = open(file_location, "rb") #“rb” (read binary)
                        part = MIMEBase('application', 'octet-stream')#Content-Type: application/octet-stream , image/png, application/pdf
                        part.set_payload((attachment).read())
                        encoders.encode_base64(part)
                        part.add_header('Content-Disposition', "attachment; filename= %s" % filename)#Content-Disposition: attachment; filename="takeoff.png"
                        msg.attach(part)
                        server = smtplib.SMTP('smtp.gmail.com', 587)# Send the message via local SMTP server.
                        server.starttls()# sendmail function takes 3 arguments: sender's address, recipient's address and message to send 
                        server.login(email, password)
                        text = msg.as_string()
                        server.sendmail(email, send_to_email, text)
                        server.quit()
                        print("Mail alert sent")
                        lcd.clear()
                        lcd_line_1 = 'mail alert sent \n'
                        lcd_line_2 = 'Sucessfully!'
                        lcd.message = lcd_line_1 + lcd_line_2
                        time.sleep(2)
                  
           if(int(speed) < 70):
                  print('vehical travel in normal speed')
                  lcd.clear()
                  lcd_line_1 = 'Vehical travel \n'
                  lcd_line_2 = 'Normal Speed'
                  lcd.message = lcd_line_1 + lcd_line_2
                  time.sleep(2)

  

  if(count== 1):
      time_count=time_count+1

  if(count== 0):
      time_count=0
      
  
           
  
